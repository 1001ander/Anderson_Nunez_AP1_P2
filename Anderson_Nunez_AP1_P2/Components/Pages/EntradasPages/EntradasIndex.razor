@page "/Entradas/Index"
@inject EntradasService entradaService
@inject NavigationManager navigationManager
@using Anderson_Nunez_AP1_P2.Models
@using Anderson_Nunez_AP1_P2.Services
@rendermode InteractiveServer

<PageTitle>Consulta de Entradas</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        @*Header*@
        <div class="card-header d-flex justify-content-between align-items-center position-relative">
            <h5 class="card-title mb-0 text-center w-100">Consulta de Entradas</h5>
        </div>

        @*Body*@
        <div class="card-body">

            <div class="row mb-2">
                <div class="col-md-12 d-flex justify-content-end">
                    <a href="/Entradas/Create" class="btn btn-success bi bi-plus-circle"> Crear</a>
                </div>
            </div>

            @*Filtro por fechas*@
            <div class="row align-items-center mb-3">
                <div class="col-3">
                    <label class="col-form-label"><strong>Rango de Fechas</strong></label>
                </div>
                <div class="col-9">
                    <div class="d-flex align-items-center gap-2">
                        <input type="date" class="form-control" style="width: 140px;" @bind="FechaDesde" />
                        <span class="text-muted">a</span>
                        <input type="date" class="form-control" style="width: 140px;" @bind="FechaHasta" />
                        <button type="button" class="btn btn-info ms-2" @onclick="FiltrarPorFecha">
                            <i class="bi bi-filter"></i> Aplicar
                        </button>
                    </div>
                </div>
            </div>

            @*Filtro general*@
            <div class="row mb-2">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                <div class="col-4">
                    <label class="col-form-label"><strong>Búsqueda</strong></label>
                </div>
            </div>

            <div class="row align-items-center mb-3">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" disabled selected>Seleccione un filtro</option>
                        <option value="EntradaId">Id</option>
                        <option value="Concepto">Concepto</option>
                        <option value="IdProducido">Producto Producido</option>
                    </InputSelect>
                </div>
                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-primary" @onclick="Buscar">
                            <i class="bi bi-search"></i> Buscar
                        </button>
                        <button type="button" class="btn btn-secondary ms-1" @onclick="LimpiarFiltros">
                            <i class="bi bi-x-circle"></i> Limpiar
                        </button>
                    </div>
                </div>
            </div>

            @*Tabla*@
            <div class="table-responsive">
                <table class="table table-hover mt-3">
                    <thead class="table table-striped text-black">
                        <tr>
                            <th>EntradaId</th>
                            <th>Fecha</th>
                            <th>Concepto</th>
                            <th>Peso Total (g)</th>
                            <th>Cantidad Producida</th>
                            <th>Producto Producido</th>
                            <th class="text-center">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (ListaFiltrada != null && ListaFiltrada.Any())
                        {
                            @foreach (var entrada in ListaFiltrada)
                            {
                                <tr>
                                    <td>@entrada.EntradaId</td>
                                    <td>@entrada.Fecha.ToString("dd/MM/yyyy")</td>
                                    <td>@entrada.Concepto</td>
                                    <td>@entrada.PesoTotal.ToString("N2")</td>
                                    <td>@entrada.CantidadProducida</td>
                                    <td class="text-center">
                                        <a href="/Entradas/Edit/@entrada.EntradaId" class="btn btn-outline-primary btn-sm" title="Editar">
                                            <i class="bi bi-pencil-square"></i>
                                        </a>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center">No hay entradas disponibles.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        @*Footer*@
        <div class="card-footer d-flex justify-content-between">
            <label>Cantidad de Entradas: @(ListaFiltrada?.Count() ?? 0)</label>
            <label>Peso Total: @TotalPesoFiltrado.ToString("N2") g</label>
            <label>Cantidad Total Producida: @TotalCantidadProducida</label>
        </div>
    </div>
</div>

@code {
    private List<Entradas> ListaEntradas = new();
    private List<Entradas> ListaFiltrada = new();
    private decimal TotalPesoFiltrado => ListaFiltrada?.Sum(e => e.PesoTotal) ?? 0;
    private int TotalCantidadProducida => ListaFiltrada?.Sum(e => e.CantidadProducida) ?? 0;

    private string Filtro { get; set; } = "";
    private string ValorFiltro { get; set; } = "";
    private DateTime? FechaDesde { get; set; }
    private DateTime? FechaHasta { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarEntradas();
    }

    private async Task CargarEntradas()
    {
        ListaEntradas = await entradaService.Listar(e => true);
        ListaFiltrada = ListaEntradas;
    }

    private async Task Buscar()
    {
        if (string.IsNullOrWhiteSpace(Filtro) || string.IsNullOrWhiteSpace(ValorFiltro))
        {
            ListaFiltrada = ListaEntradas;
            return;
        }

        switch (Filtro)
        {
            case "EntradaId":
                if (int.TryParse(ValorFiltro, out int id))
                {
                    ListaFiltrada = ListaEntradas.Where(e => e.EntradaId == id).ToList();
                }
                break;
            case "Concepto":
                ListaFiltrada = ListaEntradas
                    .Where(e => e.Concepto.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase))
                    .ToList();
                break;
            case "IdProducido":
                if (int.TryParse(ValorFiltro, out int productoId))
                {
                    ListaFiltrada = ListaEntradas.Where(e => e.ProductoId == productoId).ToList();
                }
                break;
            default:
                ListaFiltrada = ListaEntradas;
                break;
        }
    }

    private async Task FiltrarPorFecha()
    {
        if (FechaDesde == null && FechaHasta == null)
        {
            ListaFiltrada = ListaEntradas;
            return;
        }

        ListaFiltrada = ListaEntradas.Where(e =>
            (FechaDesde == null || e.Fecha >= DateOnly.FromDateTime(FechaDesde.Value)) &&
            (FechaHasta == null || e.Fecha <= DateOnly.FromDateTime(FechaHasta.Value))
        ).ToList();
    }

    private async Task LimpiarFiltros()
    {
        Filtro = "";
        ValorFiltro = "";
        FechaDesde = null;
        FechaHasta = null;
        ListaFiltrada = ListaEntradas;
    }
}