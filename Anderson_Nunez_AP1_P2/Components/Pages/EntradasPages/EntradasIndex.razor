@page "/Entradas/Index"
@using Anderson_Nunez_AP1_P2.Models
@using Anderson_Nunez_AP1_P2.Services
@inject EntradasService EntradasService
@inject ProductosService ProductosService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<PageTitle>Registro de Producción</PageTitle>

<BlazoredToasts />

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Entradas de Producción</h5>
        </div>

        <div class="card-body">
           
            <div class="row mb-4">
                <div class="col-md-4">
                    <label class="form-label">Fecha Desde</label>
                    <input type="date" class="form-control" @bind="fechaDesde" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Fecha Hasta</label>
                    <input type="date" class="form-control" @bind="fechaHasta" />
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button class="btn btn-outline-primary" @onclick="async () => await FiltrarPorFecha()">
                        <i class="fas fa-filter"></i> Filtrar
                    </button>
                    <button class="btn btn-outline-secondary ms-2" @onclick="LimpiarFiltros">
                        <i class="fas fa-broom"></i> Limpiar
                    </button>
                </div>
            </div>

            
            <div class="row mb-3">
                <div class="col-md-12">
                    <a href="/Entradas/Create" class="btn btn-success">
                        <i class="fas fa-plus"></i> Nueva Entrada
                    </a>
                </div>
            </div>

           
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Fecha</th>
                            <th>Concepto</th>
                            <th>Producto</th>
                            <th>Cantidad</th>
                            <th>Peso Total</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (entradasFiltradas != null && entradasFiltradas.Any())
                        {
                            @foreach (var entrada in entradasFiltradas)
                            {
                                <tr>
                                    <td>@entrada.EntradaId</td>
                                    <td>@entrada.Fecha.ToShortDateString()</td>
                                    <td>@entrada.Concepto</td>
                                    <td>@entrada.Producto?.Descripcion</td>
                                    <td>@entrada.CantidadProducida</td>
                                    <td>@entrada.PesoTotal.ToString("N2") kg</td>
                                    <td>
                                        <a href="/Entradas/Edit/@entrada.EntradaId" class="btn btn-sm btn-warning me-1">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button class="btn btn-sm btn-danger" @onclick="async () => await EliminarEntrada(entrada.EntradaId)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center">No hay entradas registradas</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="card-footer text-muted">
            <div class="row">
                <div class="col-md-6">
                    Total registros: @(entradasFiltradas?.Count ?? 0)
                </div>
                <div class="col-md-6 text-end">
                    Peso total: @(entradasFiltradas?.Sum(e => e.PesoTotal).ToString("N2") ?? "0") kg
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Entradas> entradas = new();
    private List<Entradas> entradasFiltradas = new();
    private DateTime? fechaDesde;
    private DateTime? fechaHasta;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarEntradas();
            ToastService.ShowSuccess("Datos cargados correctamente");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cargar datos: {ex.Message}");
        }
    }

    private async Task CargarEntradas()
    {
        entradas = await EntradasService.Listar(e => true);
        entradasFiltradas = entradas;
    }

    private async Task FiltrarPorFecha()
    {
        try
        {
            if (fechaDesde == null && fechaHasta == null)
            {
                entradasFiltradas = entradas;
                ToastService.ShowInfo("Filtros limpiados");
                return;
            }

            entradasFiltradas = entradas.Where(e =>
                (fechaDesde == null || e.Fecha >= fechaDesde.Value.Date) &&
                (fechaHasta == null || e.Fecha <= fechaHasta.Value.Date)
            ).ToList();

            ToastService.ShowSuccess($"Filtrado aplicado: {entradasFiltradas.Count} registros");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al filtrar: {ex.Message}");
        }
    }

    private void LimpiarFiltros()
    {
        fechaDesde = null;
        fechaHasta = null;
        entradasFiltradas = entradas;
        ToastService.ShowInfo("Filtros restablecidos");
    }

    private async Task EliminarEntrada(int id)
    {
        try
        {
            var confirmado = await JSRuntime.InvokeAsync<bool>("confirm",
                new object[] { "¿Está seguro de eliminar esta entrada?" });

            if (!confirmado) return;

            var resultado = await EntradasService.Eliminar(id);
            if (resultado)
            {
                await CargarEntradas();
                ToastService.ShowSuccess("Entrada eliminada correctamente");
            }
            else
            {
                ToastService.ShowWarning("No se pudo eliminar la entrada");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al eliminar: {ex.Message}");
        }
    }
}